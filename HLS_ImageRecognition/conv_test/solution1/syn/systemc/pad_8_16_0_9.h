// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pad_8_16_0_9_HH_
#define _pad_8_16_0_9_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct pad_8_16_0_9 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<16> > input_r_q0;
    sc_out< sc_lv<11> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<16> > output_r_d0;


    // Module declarations
    pad_8_16_0_9(sc_module_name name);
    SC_HAS_PROCESS(pad_8_16_0_9);

    ~pad_8_16_0_9();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_fu_94_p2;
    sc_signal< sc_lv<4> > i_reg_170;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > zext_ln13_fu_108_p1;
    sc_signal< sc_lv<9> > zext_ln13_reg_175;
    sc_signal< sc_lv<1> > icmp_ln11_fu_88_p2;
    sc_signal< sc_lv<5> > j_fu_118_p2;
    sc_signal< sc_lv<5> > j_reg_183;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<13> > tmp_14_cast_fu_133_p3;
    sc_signal< sc_lv<13> > tmp_14_cast_reg_188;
    sc_signal< sc_lv<1> > icmp_ln13_fu_112_p2;
    sc_signal< sc_lv<5> > k_fu_147_p2;
    sc_signal< sc_lv<5> > k_reg_196;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln19_2_fu_162_p1;
    sc_signal< sc_lv<64> > zext_ln19_2_reg_201;
    sc_signal< sc_lv<1> > icmp_ln15_fu_141_p2;
    sc_signal< sc_lv<4> > i_0_reg_55;
    sc_signal< sc_lv<5> > j_0_reg_66;
    sc_signal< sc_lv<5> > k_0_reg_77;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > tmp_fu_100_p3;
    sc_signal< sc_lv<9> > zext_ln19_fu_124_p1;
    sc_signal< sc_lv<9> > add_ln19_fu_128_p2;
    sc_signal< sc_lv<13> > zext_ln19_1_fu_153_p1;
    sc_signal< sc_lv<13> > add_ln19_1_fu_157_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln19_1_fu_157_p2();
    void thread_add_ln19_fu_128_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_94_p2();
    void thread_icmp_ln11_fu_88_p2();
    void thread_icmp_ln13_fu_112_p2();
    void thread_icmp_ln15_fu_141_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_j_fu_118_p2();
    void thread_k_fu_147_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_tmp_14_cast_fu_133_p3();
    void thread_tmp_fu_100_p3();
    void thread_zext_ln13_fu_108_p1();
    void thread_zext_ln19_1_fu_153_p1();
    void thread_zext_ln19_2_fu_162_p1();
    void thread_zext_ln19_fu_124_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
